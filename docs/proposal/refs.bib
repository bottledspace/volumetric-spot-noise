@article{pavie:hal-02413269,
  TITLE = {{Volumetric Spot Noise for Procedural 3D Shell Texture Synthesis}},
  AUTHOR = {Pavie, Nicolas and Gilet, Guillaume and Dischler, Jean-Michel and Galin, Eric and Ghazanfarpour, Djamchid},
  URL = {https://hal.archives-ouvertes.fr/hal-02413269},
  JOURNAL = {{Computer Graphics and Visual Computing (CGVC)}},
  PUBLISHER = {{Cagatay Turkay and Tao Ruan Wan}},
  YEAR = {2016},
  MONTH = Aug,
  KEYWORDS = {surface ; solid ; and object rep- resentations I37 [Computer Graphics]: Three-Dimensional Graphics and Realism-Color ; shading ; and texture Keywords Procedural texturing ; shadowing ; Image synthesis ; Procedural texturing ; I37 [Computer Graphics]: Three-Dimensional Graphics and Realism-Color ; procedural noise ; volumetric visualization ; (according to ACM CCS): I33 [Computer Graphics]: Picture/Image Generation-Display algorithms I35 [Computer Graphics]: Computational Geometry and Object Modeling-Curve},
  PDF = {https://hal.archives-ouvertes.fr/hal-02413269/file/EGUK_ShellSpotNoise.pdf},
  HAL_ID = {hal-02413269},
  HAL_VERSION = {v1},
}
@book{FernGPU2004,
  added-at = {2007-01-30T16:32:46.000+0100},
  address = {Boston [u.a.]},
  author = {Fernando, Randima},
  biburl = {https://www.bibsonomy.org/bibtex/2ed067e966cdd5b01ecd92af192f7e290/gregor},
  description = {KUG Recherche-Portal},
  interhash = {7728fcf63e1e226ff0b6452ea3b4fa6a},
  intrahash = {ed067e966cdd5b01ecd92af192f7e290},
  isbn = {0-321-22832-4},
  keywords = {Computergrafik Computergraphik},
  publisher = {Addision-Wesley},
  timestamp = {2007-01-30T16:32:46.000+0100},
  chapter = {Chapter 39. Volume Rendering Techniques},
  title = {GPU gems},
  year = 2004
}
@article{10.1145/74334.74359,
author = {Perlin, K. and Hoffert, E. M.},
title = {Hypertexture},
year = {1989},
issue_date = {July 1989},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {23},
number = {3},
issn = {0097-8930},
url = {https://doi.org/10.1145/74334.74359},
doi = {10.1145/74334.74359},
abstract = {We model phenomena intermediate between shape and texture by using space-filling applicative functions to modulate density. The model is essentially an extension of procedural solid texture synthesis, but evaluated throughout a volumetric region instead of only at surfaces.We have been able to obtain visually realistic representations of such shape+texture (hypertexture) phenomena as hair, fur, fire, glass, fluid flow and erosion effects. We show how this is done, first by describing a set of base level functions to provide basic texture and control capability, then by combining these to synthesize various phenomena.Hypertexture exists within an intermediate region between object and not-object. We introduce a notion of generalized boolean shape operators to combine shapes having such a region.Rendering is accomplished by ray marching from the eye point through the volume to accumulate opacity along each ray. We have implemented our hypertexture rendering algorithms on a traditional serial computer, a distributed network of computers and a coarse-grain MIMD computer. Extensions to the rendering technique incorporating refraction and reflection effects are discussed.},
journal = {SIGGRAPH Comput. Graph.},
month = {jul},
pages = {253–262},
numpages = {10}
}
@inproceedings{10.1145/74333.74359,
author = {Perlin, K. and Hoffert, E. M.},
title = {Hypertexture},
year = {1989},
isbn = {0897913124},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/74333.74359},
doi = {10.1145/74333.74359},
abstract = {We model phenomena intermediate between shape and texture by using space-filling applicative functions to modulate density. The model is essentially an extension of procedural solid texture synthesis, but evaluated throughout a volumetric region instead of only at surfaces.We have been able to obtain visually realistic representations of such shape+texture (hypertexture) phenomena as hair, fur, fire, glass, fluid flow and erosion effects. We show how this is done, first by describing a set of base level functions to provide basic texture and control capability, then by combining these to synthesize various phenomena.Hypertexture exists within an intermediate region between object and not-object. We introduce a notion of generalized boolean shape operators to combine shapes having such a region.Rendering is accomplished by ray marching from the eye point through the volume to accumulate opacity along each ray. We have implemented our hypertexture rendering algorithms on a traditional serial computer, a distributed network of computers and a coarse-grain MIMD computer. Extensions to the rendering technique incorporating refraction and reflection effects are discussed.},
booktitle = {Proceedings of the 16th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {253–262},
numpages = {10},
series = {SIGGRAPH '89}
}
@inproceedings{10.1145/122718.122751,
author = {van Wijk, Jarke J.},
title = {Spot Noise Texture Synthesis for Data Visualization},
year = {1991},
isbn = {0897914368},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/122718.122751},
doi = {10.1145/122718.122751},
abstract = {The use of stochastic texture for the visualization of scalar and vector fields over surfaces is discussed. Current techniques for texture synthesis are not suitable, because they do not provide local control, and are not suited for the design of textures. A new technique, spot noise, is presented that does provide these features. Spot noise is synthesized by addition of randomly weighted and positioned spots. Local control of the texture is realized by variation of the spot. The spot is a useful primitive for texture design, because, in general, the relations between features of the spot and features of the texture are straightforward. Various examples and applications are shown. Spot noise lends itself well for the synthesis of texture over curved surfaces, and is therefore an alternative to solid texturing. The relations of spot noise with a variety of other techniques, such as radom faults, filtering, sparse convolution, and particle systems, are discussed. It appears that spot noise provides a new perspective on those techniques.},
booktitle = {Proceedings of the 18th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {309–318},
numpages = {10},
keywords = {particle systems, texture synthesis, scientific visualization, flow visualization, fractals},
series = {SIGGRAPH '91}
}
@article{10.1145/127719.122751,
author = {van Wijk, Jarke J.},
title = {Spot Noise Texture Synthesis for Data Visualization},
year = {1991},
issue_date = {July 1991},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {25},
number = {4},
issn = {0097-8930},
url = {https://doi.org/10.1145/127719.122751},
doi = {10.1145/127719.122751},
abstract = {The use of stochastic texture for the visualization of scalar and vector fields over surfaces is discussed. Current techniques for texture synthesis are not suitable, because they do not provide local control, and are not suited for the design of textures. A new technique, spot noise, is presented that does provide these features. Spot noise is synthesized by addition of randomly weighted and positioned spots. Local control of the texture is realized by variation of the spot. The spot is a useful primitive for texture design, because, in general, the relations between features of the spot and features of the texture are straightforward. Various examples and applications are shown. Spot noise lends itself well for the synthesis of texture over curved surfaces, and is therefore an alternative to solid texturing. The relations of spot noise with a variety of other techniques, such as radom faults, filtering, sparse convolution, and particle systems, are discussed. It appears that spot noise provides a new perspective on those techniques.},
journal = {SIGGRAPH Comput. Graph.},
month = {jul},
pages = {309–318},
numpages = {10},
keywords = {particle systems, scientific visualization, texture synthesis, fractals, flow visualization}
}
@article{Villemin2013Flames,
   author  = {Ryusuke Villemin and Christophe Hery},
   title   = {Practical Illumination from Flames},
   year    = {2013},
   month   = {December},
   day     = {31},
   journal = {Journal of Computer Graphics Techniques (JCGT)},
   volume  = {2},
   number  = {2},
   pages   = {142--155},
   url     = {http://jcgt.org/published/0002/02/10/},
   issn    = {2331-7418}
}
@artwork{spirit,
   title = {Spirit},
   location={Montreal: Galerie de Bellefeuille},
   author = {Peter Hoffer},
   year = {2021},
   url = {https://www.artsy.net/artwork/peter-hoffer-spirit-2}
}
@online{thecloud,
   title = {The Cloud},
   author = {Richard Clarkson},
   url = {https://www.rclarkson.com/products/speaker-cloud}
}
